{"version":3,"sources":["Note.js","Board.js","serviceWorker.js","index.js"],"names":["Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editing","edit","bind","assertThisInitialized","remove","save","renderForm","renderDisplay","randomBetween","style","right","window","innerWidth","top","innerHeight","transform","concat","x","y","s","Math","ceil","random","textArea","_newText","focus","select","nextProps","nextState","children","setState","onRemove","index","e","preventDefault","onChange","value","_this2","react_default","a","createElement","className","onSubmit","ref","input","defaultValue","id","index_esm","onClick","Component","Board","notes","add","eachNote","update","nextId","self","count","fetch","then","response","json","split","forEach","sentence","substring","text","prevState","toConsumableArray","note","uniqueId","newText","i","console","log","map","objectSpread","filter","src_Note","key","Boolean","location","hostname","match","ReactDOM","render","src_Board","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e7041fa.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport * as FontAwesome from 'react-icons/fa'\n\nclass Note extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tediting: false\n\t\t}\n\t\tthis.edit = this.edit.bind(this)\n\t\tthis.remove = this.remove.bind(this)\n\t\tthis.save = this.save.bind(this)\n\t\tthis.renderForm = this.renderForm.bind(this)\n\t\tthis.renderDisplay = this.renderDisplay.bind(this)\n\t\tthis.randomBetween = this.randomBetween.bind(this)\n\t}\n\n\tcomponentWillMount() {\n\t\tthis.style = {\n\t\t\tright: this.randomBetween(0, window.innerWidth - 150, 'px'),\n\t\t\ttop: this.randomBetween(0, window.innerHeight - 150, 'px'),\n\t\t\ttransform: `rotate(${this.randomBetween(-25, 25, 'deg')})`\n\t\t}\n\t}\n\n\trandomBetween(x, y, s) {\n\t\treturn x + Math.ceil(Math.random() * (y-x)) + s\n\t}\n\n\tcomponentDidUpdate() {\n\t\tvar textArea\n\t\tif(this.state.editing) {\n\t\t\ttextArea = this._newText\n\t\t\ttextArea.focus()\n\t\t\ttextArea.select()\n\t\t}\n\n\t}\n\n\tshouldComponentUpdate(nextProps, nextState) {\n\t\treturn (\n\t\t\tthis.props.children !== nextProps.children || this.state !== nextState\n\t\t)\n\t}\n\n\tedit() {\n\t\tthis.setState({\n\t\t\tediting: true\n\t\t})\n\t}\n\n\tremove() {\n\t\tthis.props.onRemove(this.props.index)\n\t}\n\n\tsave(e) {\n\t\te.preventDefault()\n\t\tthis.props.onChange(this._newText.value, this.props.index)\n\t\tthis.setState({\n\t\t\tediting: false\n\t\t})\n\t}\n\n\trenderForm() {\n\t\treturn (\n\t\t\t<div className=\"note\" style={this.style}>\n\t\t\t\t<form onSubmit={this.save}>\n\t\t\t\t\t<textarea ref={input => this._newText = input}\n\t\t\t\t\t\t\t  defaultValue={this.props.children}/>\n\t\t\t\t\t<button id=\"save\"><FontAwesome.FaSave /></button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n\n\trenderDisplay() {\n\t\treturn (\n\t\t\t<div className=\"note\" style={this.style}>\n\t\t\t\t<p>{this.props.children}</p>\n\t\t\t\t<span>\n\t\t\t\t\t<button onClick={this.edit} id=\"edit\"><FontAwesome.FaPencilAlt /></button>\n\t\t\t\t\t<button onClick={this.remove} id=\"remove\"><FontAwesome.FaTrash /></button>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t)\n\t}\n\trender() {\n\t\treturn this.state.editing ? this.renderForm() : this.renderDisplay()\n\t}\n\n}\n\nexport default Note\n\n\n\n\n\n","import React, { Component } from 'react'\nimport Note from './Note'\nimport * as FontAwesome from 'react-icons/fa'\n\nclass Board extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tnotes: []\n\t\t}\n\t\tthis.add = this.add.bind(this)\n\t\tthis.eachNote = this.eachNote.bind(this)\n\t\tthis.update = this.update.bind(this)\n\t\tthis.remove = this.remove.bind(this)\n\t\tthis.nextId = this.nextId.bind(this)\n\t}\n\n\tcomponentWillMount() {\n\t\tvar self = this\n\t\tif(this.props.count) {\n\t\t\tfetch(`https://baconipsum.com/api/?type=all-meat&sentences=${this.props.count}`)\n\t\t\t\t.then(response => response.json())\n\t\t\t\t.then(json => json[0]\n\t\t\t\t\t\t\t\t.split('. ')\n\t\t\t\t\t\t\t\t.forEach(sentence => self.add(sentence.substring(0, 25))))\n\t\t}\n\t}\n\n\tadd(text) {\n\t\tthis.setState(prevState => ({\n\t\t\tnotes: [\n\t\t\t\t...prevState.notes,\n\t\t\t\t{\n\t\t\t\t\tid: this.nextId(),\n\t\t\t\t\tnote: text\n\t\t\t\t}\n\t\t\t]\n\t\t}))\n\t}\n\n\tnextId() {\n\t\tthis.uniqueId = this.uniqueId || 0\n\t\treturn this.uniqueId++\n\t}\n\n\tupdate(newText, i) {\n\t\tconsole.log('updating item at index', i, newText)\n\t\tthis.setState(prevState => ({\n\t\t\tnotes: prevState.notes.map(\n\t\t\t\tnote => (note.id !== i) ? note : {...note, note: newText}\n\t\t\t)\n\t\t}))\n\t}\n\n\tremove(id) {\n\t\tconsole.log('removing item at', id)\n\t\tthis.setState(prevState => ({\n\t\t\tnotes: prevState.notes.filter(note => note.id !== id)\n\t\t}))\n\t}\n\n\teachNote(note, i) {\n\t\treturn (\n\t\t\t<Note key={note.id}\n\t\t\t\t  index={note.id}\n\t\t\t\t  onChange={this.update}\n\t\t\t\t  onRemove={this.remove}>\n\t\t\t\t  {note.note}\n\t\t    </Note>\n\t\t)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"board\">\n\t\t\t\t{this.state.notes.map(this.eachNote)}\n\t\t\t\t<button onClick={this.add.bind(null, \"New Note\")}\n\t\t\t\t\t\tid=\"add\">\n\t\t\t\t\t<FontAwesome.FaPlus />\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Board","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './Board';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Board count={50}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}